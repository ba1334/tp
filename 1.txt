Insertion Sort - Part 1 
void insertionSort(int ar_size, int * ar) { 
int j = ar_size-1; 
int v = ar[j]; 
while(v < ar[j-1]) { 
ar[j] = ar[j-1]; 
j--; 
print(ar_size, ar); 
} 
ar[j] = v; 
 
print(ar_size, ar); 
} 
--------------------------------------------------------------------------------------------------------------------------------------
insertion Sort - Part 2 
void insertionSort(int ar_size, int * ar) { 
for (int i = 1; i < ar_size; ++i) { 
int j = i - 1; 
int p = ar[i]; 
while (j >= 0 && p < ar[j]) { 
ar[j+1] = ar[j]; 
j--; 
} 
ar[j+1] = p; 
printf("%d", ar[0]); 
for (int k = 1; k < ar_size; ++k) { 
printf(" %d", ar[k]); 
} 
printf("\n"); 
} 
} 
------------------------------------------------------------------------------------------------------------------------------------- 
Correctness and the Loop Invariant  
void insertionSort(int ar_size, int * ar) { 
int i,j; 
int value; 
for(i=1;i<ar_size;i++) 
{ 
value=ar[i]; 
j=i-1; 
while(j>=0 && value<ar[j]) 
{ 
ar[j+1]=ar[j]; 
j=j-1; 
} 
ar[j+1]=value; 
} 
for(j=0;j<ar_size;j++) 
{ 
printf("%d",ar[j]); 
printf(" "); 
} 
} 
--------------------------------------------------------------------------------------------------------------------------------------
Running Time of Algorithms 
void insertionSort(int ar_size, int * ar,int *shifts) {  
int temp=ar[ar_size-1],i; 
for(i=ar_size-2;i>=0;i--) 
{ 
if(ar[i]>temp){ 
ar[i+1]=ar[i]; 
*shifts=*shifts+1; 
} 
else 
break; 
 
} 
ar[i+1]=temp; 
 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
Counting Sort 1 
 
scanf("%d",&n); 
 
for(i=0;i<100;i++) 
{ 
b[i]=0; 
} 
for(i=0;i<n;i++) 
{ 
scanf("%d",&a); 
b[a]++; 
} 
for(i=0;i<100;i++) 
{ 
printf("%d ", b[i]); 
} -------------------------------------------------------------------------------------------------------------------------------------- 
The Power Sum 
int the_power_sum(int n, int m,int p){ 
int tmp = pow(m,p); 
if(tmp == n) return 1; 
if(tmp > n) return 0; 
return the_power_sum(n,m+1,p) + the_power_sum(n-tmp, m+1,p); 
} -------------------------------------------------------------------------------------------------------------------------------------- 
Counter Game 
scanf("%d",&t); 
for(i=0;i<t;++i) 
{ 
win=0; 
scanf("%lu",&n); 
if(n==1) 
printf("Richard\n"); 
else 
{ 
while(n!=1) 
{ 
if(isPow2(n)) 
n>>=1; 
else 
n-=largePow(n); 
++win; 
 
} 
} 
if(win%2==0) 
printf("Richard\n"); 
else 
printf("Louise\n"); 
} 
return 0; 
} 
int isPow2(long unsigned int n) 
{ 
return !(n&(n-1)); 
} 
--------------------------------------------------------------------------------------------------------------------------------------
Sherlock and Cost 
if(j) { 
X = L - 1 + ML; 
Y = R - 1 + MR; 
P = abs(L - B) + ML; 
Q = abs(R - B) + MR; 
ML = (X > Y ? X : Y); 
MR = (P > Q ? P : Q); 
} else { 
ML = MR = 0; 
} 
L = 1; 
R = B; 
} -------------------------------------------------------------------------------------------------------------------------------------- 
Marc's Cakewalk 
void quicksort(int *x,int start,int end) 
{ 
if(start<end) 
{ 
int i = partition(x,start,end); 
quicksort(x,start,i-1); 
quicksort(x,i+1,end); 
} 
} 
quicksort(calories,0,n-1); 
 
for(i=0;i<n;i++) 
{ 
sum += calories[i]*((int)pow(2,i)); 
 
} 
printf("%d",sum);
 -------------------------------------------------------------------------------------------------------------------------------------- 
Closest Numbers 
quickSort(a,0,n-1) 
//finding smallest 
int min=a[1]-a[0]; 
for(i=2;i<n;i++) 
if(a[i]-a[i-1]<min) min=a[i]-a[i-1]; 
//printing all pairs 
for(i=1;i<n;i++) 
if(a[i]-a[i-1]==min) printf("%d %d ",a[i-1],a[i]); 
printf("\n"); 
 
Ice Cream Parlor 
for( ; t>0 ; t--) 
{ 
scanf("%d%d",&c,&l); 
for(i=0;i<l;i++) 
scanf("%d",&arr[i]); 
for(i=0;i<l-1;i++) 
for(j=i+1;j<l;j++) 
{ 
if(arr[i]+arr[j]==c) 
printf("%d %d\n",i+1,j+1); 
} 
} 
 
-------------------------------------------------------------------------------------------------------------------------------------- 
Maximizing XOR 
int maxXor(int l, int r) { 
int max = 0,i,j; 
for(i=l;i<r;i++) 
for(j=i+1;j<=r;j++) 
max = max<(i^j)?i^j:max; 
return max; 
} 
  
Sum vs XOR 
while(n>0){ 
if(n%2==0)m*=2; 
n/=2; 
} 
printf("%lld\n",m);
 -------------------------------------------------------------------------------------------------------------------------------------- 
Flipping Bits 
scanf("%d", &t); 
while(t-- > 0) { 
scanf("%u", &n); 
printf("%u\n", ~n); 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
Mark and Toys 
scanf("%d",&n); 
scanf("%d",&k); 
for(i=0;i<n;i++) 
scanf("%d",&cost[i]); 
quicksort(cost,0,n-1); 
while(avail<=k) 
{ 
avail+=cost[count]; 
count++; 
} 
printf("%d\n",count-1);
 -------------------------------------------------------------------------------------------------------------------------------------- 
STRONG PASSWORD 
int minimumNumber(int n, char* password) { 
int L_c = 0; 
int U_c = 0; 
int no = 0; 
int s_c = 0; 
int len = strlen(password); 
int i; 
for(i = 0; i<n; i++) 
{ 
if(password[i] >= 'a' && password[i] <= 'z') 
L_c++; 
else if(password[i] >= 'A' && password[i] <= 'Z') 
U_c++; 
else if(password[i] >= '0' && password[i] <= '9') 
no++; 
else 
s_c++; 
} 
int add = 0; 
if(L_c == 0) 
add++; 
if(U_c == 0) 
add++; 
if(no == 0) 
add++; 
if(s_c == 0) 
add++; 
len = len + add; 
if(len < 6) 
add = add + 6 - len; 
return add; 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
CAESAR CIPHER 
for(i=0;i<n;i++) 
{ 
x=ar[i]; 
if(x>=97 && x<=122) 
{ 
x=x+(k%26); 
if(x>122) 
{ 
x=96+(x-122); 
} 
ar[i]=x; 
} 
else if(x>=65 && x<=90) 
{ 
x=x+(k%26); 
if(x>90) 
{ 
x=64+(x-90); 
} 
ar[i]=x; 
} 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
PANGRAMS 
for(i=0;i<l;i++) 
{ 
if(s[i]==' ') 
continue; 
if(s[i]>='a') 
s[i]=s[i]-('a'-'A'); 
if(!(f[s[i]]++)) 
ans++; 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
PREFIX SUM ARRAY 
create_prefix_sum_array(int arr[], int n) 
{ 
int i; 
for (i = 1; i<n; i++) 
{ 
arr[i] = arr[i] + arr[i-1]; 
} 
} 
void sum(int arr[], int n, int a, int b){ 
int result; 
if (a == 0) 
result = arr[b]; 
else 
result = arr[b] - arr[a-1]; 
printf("The sum is %d", result); 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
FENWICK TREE CONSTRUCTION 
int sum(int arr[], int n, int a, int b){ 
int i, sum=0; 
for (i = a; i<=b; i++) 
{ 
sum += arr[i] ; 
} 
return sum; 
} 
void create_fenwick_tree(int T[], int arr[], int n) 
{ 
int a, b, k; 
for (k=1; k<=n; k++) 
{ 
a = k – (k&-k) +1; 
b = k; 
T[k] = sum(arr,n,a,b); 
} 
}
 -------------------------------------------------------------------------------------------------------------------------------------- 
FENWICK TREE SUM OF ELEMENTS 
int sum(int T[], int k) { 
int s = 0; 
while (k >= 1) { 
s += T[k]; 
k -= k&-k; 
} 
printf("\n The sum is %d",s) ; 
}
 -------------------------------------------------------------------------------------------------------------------------------------- 
FLIPPING BITS 
scanf("%d", &t); 
while(t-- > 0) { 
scanf("%u", &n); 
printf("%u\n", ~n); 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
GREEDY FLORIST 
int a[200],i,j,k,l,sum,n; 
sum = 0; 
for(i=0;i<n;i++) 
sum+= a[i]*(1+i/k); 
printf("%d\n",sum);
 -------------------------------------------------------------------------------------------------------------------------------------- 
CAMELCASE 
scanf("%s",s); 
int count=0,i; 
for(i=0;i<strlen(s);i++) 
{ 
if(s[i]>=65 && s[i]<=90) 
{ 
count++; 
} 
} 
printf("%d\n",count+1); 
-------------------------------------------------------------------------------------------------------------------------------------- 
MARS EXPLORATION 
for(i=0;S[i]!='\0';i+=3){ 
if(S[i]!='S'){ 
count++; 
} 
if(S[i+1]!='O'){ 
count++; 
} 
if(S[i+2]!='S'){ 
count++; 
} 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
FUNNY STRING 
funny = 1; 
for(i=1, r=N-2; i<N; i++, r--) { 
if (fabs(S[i]-S[i-1]) != fabs(S[r]-S[r+1])) { 
funny = 0; 
break; 
} 
} 
if (funny) 
{ 
printf("funny"); 
} 
else 
printf("not funny");
 -------------------------------------------------------------------------------------------------------------------------------------- 
ALTERNATING CHARECTERS 
while(t--) 
{ 
scanf("%s",c); 
for(i=0; c[i] != ‘\0’; i++) 
{ 
if(c[i]==c[i+1]) 
{ 
count++; 
} 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
BEAUTIFUL BINARY STRING 
while(B[i]){ 
if(B[i]=='0'&&B[i+1]=='1'&&B[i+2]=='0'){ 
B[i+2]='1'; 
count++; 
} 
i++; 
} 
-------------------------------------------------------------------------------------------------------------------------------------- 
FENWICK TREE ADD A VALUE 
void add(int T[],int n, int k, int x) { 
while (k <= n) { 
T[k] += x; 
k += k&-k; 
} 
display(T,n); 
} 
printf("\n Enter the position and value to be increased "); 
scanf("%d%d",&k,&x); 
add(T,n, k, x); 
-------------------------------------------------------------------------------------------------------------------------------------- 
